@page "/"

@using System.Threading
@using System.Net.Http.Json 
@using Microsoft.Extensions.Configuration
@using System.Text.Json

@inject HttpClient http
@inject IConfiguration config

<h1>Diagnostics</h1>

<p>Current work rate is @workrate docs/sec</p>

<p>
    <input id="hideTerminated" type="checkbox" checked="@hideTerminated" 
            @onchange="@(async e => await ToggleTerminated((bool)e.Value))" />
    <label for="hideTerminated">Hide terminated instances</label>
</p>

@if (collectorInstances == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Instance Id</th>
                <th>Instance Status</th>
                <th>Created Time</th>
                <th>Last Updated Time</th>
                <th>Duration</th>
                <th>Action</th>
                <th>Partition #</th>
                <th>Total Processed</th>
                <th>Total Failed</th>
                <th>Total Transient Failures</th>
            </tr>
        </thead>
        <tbody>
            @for(int i=0; i<collectorInstances.Length; i++)
            {
                var collectorInstance = collectorInstances[i];

                <tr>
                    <td>@collectorInstance.Name</td>
                    <td>@collectorInstance.InstanceId</td>
                    <td>@collectorInstance.RuntimeStatus</td>
                    <td>@collectorInstance.CreatedTime.ToLocalTime()</td>
                    <td>@collectorInstance.LastUpdatedTime.ToLocalTime()</td>
                    <td>@(DateTime.Now - collectorInstance.CreatedTime.ToLocalTime())</td>
                    <td>
                        <button @onclick="@(async _ => await Restart(@collectorInstance.InstanceId))">Restart</button>
                        <button @onclick="@(async _ => await Terminate(@collectorInstance.InstanceId))">Terminate</button>
                        <button @onclick="@(async _ => await Purge(@collectorInstance.InstanceId))">Purge</button>
                    </td>
                </tr>
            }
            @for(int i=0; i<processorInstances.Length; i++)
            {
                var processorInstance = processorInstances[i];
                var stats = processorInputs[i].Stats;

                <tr>
                    <td>@processorInstance.Name</td>
                    <td>@processorInstance.InstanceId</td>
                    <td>@processorInstance.RuntimeStatus</td>
                    <td>@processorInstance.CreatedTime.ToLocalTime()</td>
                    <td>@processorInstance.LastUpdatedTime.ToLocalTime()</td>
                    <td>@(DateTime.Now - processorInstance.CreatedTime.ToLocalTime())</td>
                    <td>
                        <button @onclick="@(async _ => await Restart(@processorInstance.InstanceId))">Restart</button>
                        <button @onclick="@(async _ => await Terminate(@processorInstance.InstanceId))">Terminate</button>
                        <button @onclick="@(async _ => await Purge(@processorInstance.InstanceId))">Purge</button>
                    </td>
                    <td>@i</td>
                    <td>@stats.TotalProcessed</td>
                    <td>@stats.TotalFailed</td>
                    <td>@stats.TotalTransientFailures</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>@processorInputs.Sum(x => x.Stats.TotalProcessed)</td>
                <td>@processorInputs.Sum(x => x.Stats.TotalFailed)</td>
                <td>@processorInputs.Sum(x => x.Stats.TotalTransientFailures)</td>
                </tr>
        </tfoot>

    </table>
}

@code {
    private Timer timer;
    private DateTime start;
    private Int64 total;
    private ProcessorInput[] processorInputs;
    private DurableOrchestrationStatus[] processorInstances;
    private DurableOrchestrationStatus[] collectorInstances;
    private int workrate;
    private bool hideTerminated = true;

    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer(new TimerCallback(async _ => await Reload()), null, 2000, 2000);
        }
    }

    private async Task Reload()
    {
        var instances = await http.GetFromJsonAsync<DurableOrchestrationStatus[]>(config["EndpointUrl"]);
        collectorInstances = instances.Where(x => x.Name == "Collector" && 
            (!hideTerminated ||
            x.RuntimeStatus != DurableOrchestrationStatus.OrchestrationRuntimeStatus.Terminated)).ToArray();
        processorInstances = instances.Where(x => x.Name == "Processor" && 
            (!hideTerminated ||
            x.RuntimeStatus != DurableOrchestrationStatus.OrchestrationRuntimeStatus.Terminated)).ToArray();
        processorInputs = processorInstances.Select(
            x => JsonSerializer.Deserialize<ProcessorInput>(x.Input.GetRawText())).ToArray();
        Int64 currentTotal = processorInputs.Sum(x => x.Stats.TotalProcessed + x.Stats.TotalFailed);
        if (start == DateTime.MinValue)
        {
            start = DateTime.Now;
            total = currentTotal;
        }
        workrate = (int)((currentTotal-total) / (DateTime.Now - start).TotalSeconds);
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ToggleTerminated(bool hideTerminated)
    {
        this.hideTerminated = hideTerminated;
        await Reload();
    }

    private async Task Restart(string instanceId)
    {
        await http.PostAsync(config["EndpointUrl"], new StringContent(instanceId));
        await Reload();
    }

    private async Task Terminate(string instanceId)
    {
        await http.PatchAsync(config["EndpointUrl"], new StringContent(instanceId));
        await Reload();
    }

    private async Task Purge(string instanceId)
    {
        var message = new HttpRequestMessage(HttpMethod.Delete, config["EndpointUrl"]);
        message.Content = new StringContent(instanceId);
        await http.SendAsync(message);
        await Reload();
    }
}
